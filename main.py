# Exibot.py

"""–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –≠–∫—Å–∏.
–û—Å–Ω–æ–≤–Ω–æ–µ —è–¥—Ä–æ: –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–æ–≤, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DeepSeek.
–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ù–ï –º–µ–Ω—è—Ç—å –±–µ–∑ —è–≤–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è ‚Äî —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –±–æ—Ç–∞.
"""

import os
import re
import json
import random
import logging
import asyncio
from typing import List
import state
from dotenv import load_dotenv
from openai import OpenAI
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Update, BotCommand, Message
from aiogram.filters import Command
from aiogram.exceptions import TelegramForbiddenError
from aiogram import types


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TELEGRAM_LIMIT = 4096  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

# === Env ===
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env)")
if not DEEPSEEK_API_KEY:
    logging.warning("DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –æ—Ç–≤–µ—Ç—ã –ò–ò –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),  # –ø–∏—à–µ–º –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –¥—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# === Aiogram core ===
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
app_router = Router()

# –ê–¥–º–∏–Ω—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä
from admin_commands import admin_router  # noqa: E402 (–Ω–∞—Ä–æ—á–Ω–æ –Ω–∏–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–¥—Ä–∞)

# === DeepSeek/OpenAI –∫–ª–∏–µ–Ω—Ç ===
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")

# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON ===
def load_json(filename: str) -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON –∏–∑ –ø–∞–ø–∫–∏ config/<filename>. –£–ø–∞—Å—Ç—å —Å –ª–æ–≥–æ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –±–∏—Ç—ã–π."""
    path = os.path.join("config", filename)
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        logging.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {path}")
        raise
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {filename}: {e}")
        raise

# === –ö–æ–Ω—Ñ–∏–≥–∏ ===
fetish_triggers = load_json("fetishes_triggers.json")
FETISH_NAMES = load_json("fetish_names.json")

mood_data = load_json("mood.json")
MOODS = mood_data["MOODS"]

# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
def split_message(text: str, limit: int = TELEGRAM_LIMIT) -> List[str]:
    """–†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ <= limit"""
    parts: List[str] = []
    while len(text) > limit:
        cut = text.rfind("\n", 0, limit)
        if cut == -1:
            cut = limit
        parts.append(text[:cut])
        text = text[cut:].lstrip()
    if text:
        parts.append(text)
    return parts

# === –ì—Ä—É–∑–∏–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–ø—Ä–æ–º–ø—Ç—ã, —Ñ—Ä–∞–∑—ã) ===
personality = load_json("personality.json")
GREETINGS: List[str] = personality["GREETINGS"]
HORNY: List[str] = personality["HORNY"]
INSULTS: List[str] = personality["INSULTS"]

system_prompt_data = load_json("system_prompt.json")
SYSTEM_PROMPT = (
    " ".join(system_prompt_data["SYSTEM_PROMPT"])
    if isinstance(system_prompt_data["SYSTEM_PROMPT"], list)
    else system_prompt_data["SYSTEM_PROMPT"]
)

rp_prompt_data = load_json("rp_prompt.json")
RP_PROMPT = rp_prompt_data["RP_PROMPT"]

start_data = load_json("start_messages.json")
START_MESSAGES: List[str] = start_data["START_MESSAGES"]

# === emotes.json ===
emotes = load_json("emotes.json")
CATEGORIES: dict = emotes["CATEGORIES"]

def ends_with_emote(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ª—é–±–æ–π —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    all_emotes: List[str] = []
    for emlist in CATEGORIES.values():
        all_emotes.extend(emlist)
    stripped = text.strip()
    return any(stripped.endswith(em) for em in all_emotes)

def pick_emote(category: str) -> str:
    """–°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç)."""
    arr = CATEGORIES.get(category.upper(), [])
    return random.choice(arr) if arr else ""

# === –†–µ–ø–ª–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π ===
question_insult_replies = load_json("question_insult_replies.json")
QUESTION_INSULT_REPLIES: List[str] = question_insult_replies.get("QUESTION_INSULT_REPLIES", [])

# === images.json ===
IMAGES_FILE = os.path.join("config", "images.json")

def load_images() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    if not os.path.exists(IMAGES_FILE):
        with open(IMAGES_FILE, "w", encoding="utf-8") as f:
            json.dump({"IMAGES": []}, f, ensure_ascii=False, indent=2)
    with open(IMAGES_FILE, "r", encoding="utf-8") as f:
        return json.load(f).get("IMAGES", [])

def save_images(images: List[str]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ."""
    with open(IMAGES_FILE, "w", encoding="utf-8") as f:
        json.dump({"IMAGES": images}, f, ensure_ascii=False, indent=2)

# === users.json ===
USERS_FILE = os.path.join("config", "users.json")
if not os.path.exists(USERS_FILE):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({"USERS": []}, f, ensure_ascii=False, indent=2)

with open(USERS_FILE, "r", encoding="utf-8") as f:
    users_data = json.load(f)

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ state, –∞ –Ω–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
state.USERS = users_data.get("USERS", [])

def save_users() -> None:
    """–ü–µ—Ä—Å–∏—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ config/users.json."""
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump({"USERS": state.USERS}, f, ensure_ascii=False, indent=2)

# === –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é ===
async def set_commands(bot: Bot) -> None:
    """–ó–∞–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram-–∫–ª–∏–µ–Ω—Ç–∞."""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="randomart", description="üé® –°–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç"),
        BotCommand(command="help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    await bot.set_my_commands(commands)

# === –•–µ–ª–ø–µ—Ä—ã ===
def detect_fetish(user_message: str) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ñ–µ—Ç–∏—à–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π —Ñ–µ—Ç–∏—à–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: ['bondage', 'watersports']).
    """
    text = user_message.lower()
    found: List[str] = []
    for fetish, keywords in fetish_triggers.items():
        if any(kw in text for kw in keywords):
            found.append(fetish)
    return found

def random_horny() -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é horny-—Ä–µ–ø–ª–∏–∫—É (–∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)."""
    return random.choice(HORNY) if HORNY else ""

def is_greeting(text: str) -> bool:
    """–ì—Ä—É–±—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)."""
    greetings = {
        "–ø—Ä–∏–≤–µ—Ç", "–∫—É", "–∑–¥–∞—Ä–æ–≤", "–π–æ—É", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π",
        "–∫—É–ª–∏—Ç–∏", "—Ö–∞–π", "–∫—É–∫—É", "–ø—Ä–∏–≤",
        "hi", "hello", "hey", "yo", "sup", "yoho"
    }
    words = re.findall(r"\w+", text.lower())
    for word in words:
        if word in greetings:
            return True
        if word.startswith(("–ø—Ä–∏–≤", "–ø—Ä–∏–≤–µ—Ç")):
            return True
        if word.startswith("–∑–¥–∞—Ä–æ–≤") or word.startswith("–∑–¥–æ—Ä–æ–≤"):
            return True
        if word.startswith("yo") or word.startswith("sup"):
            return True
    return False

# === AI-–º–æ–¥—É–ª–∏ ===
async def detect_mood_ai(user_message: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: sweet, horny, angry, playful.
    """
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="deepseek-chat",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –º–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ –≠–∫—Å–∏. "
                        "–ù–∞ –≤—Ö–æ–¥ —Ç–µ–±–µ –¥–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É –±–æ—Ç–∞ –æ–Ω–æ –≤—ã–∑–æ–≤–µ—Ç. "
                        "–í—ã–±–∏—Ä–∞–π —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–æ –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Å–ª–æ–≤:\n\n"
                        "- 'sweet' ‚Üí –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∏–ª–æ–µ, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –∑–∞–±–æ—Ç–∞.\n"
                        "- 'horny' ‚Üí –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—à–ª–æ–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ–∫—Å, –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ.\n"
                        "- 'angry' ‚Üí –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ, —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è.\n"
                        "- 'playful' ‚Üí –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ, —à—É—Ç–ª–∏–≤–æ–µ –∏–ª–∏ –º–µ–º–Ω–æ–µ.\n\n"
                        " –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
                    )
                },
                {"role": "user", "content": user_message}
            ],
            max_tokens=5,
            temperature=0
        )
        mood = (response.choices[0].message.content or "").strip().lower()
        if mood not in {"sweet", "horny", "angry", "playful"}:
            mood = "playful"  # –¥–µ—Ñ–æ–ª—Ç
        # –ª–æ–≥–∏—Ä—É–µ–º —Å–º–µ–Ω—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        if mood != state.MOOD:
            logging.info(f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–º–µ–Ω–∏–ª–æ—Å—å: {state.MOOD} ‚Üí {mood}")
            state.MOOD = mood
        return mood
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}", exc_info=True)
        return state.MOOD

async def detect_insult_ai(user_message: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 'general', 'direct', 'question' –∏–ª–∏ 'none'
    """
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="deepseek-chat",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –≠–∫—Å–∏. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º –≤ —Ç–≤–æ–π –∞–¥—Ä–µ—Å. "
                        "–ï—Å–ª–∏ –¥–∞, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º:\n"
                        "- 'general' ‚Üí –æ–±—â–µ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ (–Ω–µ –ª–∏—á–Ω–æ —Ç–µ–±–µ, –∞ –≤–æ–æ–±—â–µ).\n"
                        "- 'direct' ‚Üí –ø—Ä—è–º–æ–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –≤ —Ç–≤–æ–π –∞–¥—Ä–µ—Å –≤ —É—Ç–≤–µ—Ä–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ.\n"
                        "- 'question' ‚Üí –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –≤ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∏—Ç '?').\n"
                        "- 'none' ‚Üí –µ—Å–ª–∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –Ω–µ—Ç.\n\n"
                        "‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                        "‚Äî –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –ø–æ—Ö–æ—Ç–ª–∏–≤–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ "
                        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è, –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –ø—Ä–æ —Ç–µ–ª–æ, "
                        "–Ω–∞–º—ë–∫ –Ω–∞ —Å–µ–∫—Å, horny-—à—É—Ç–∫–∞) ‚Äî —ç—Ç–æ –ù–ï –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ. "
                        "–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π 'none'.\n"
                        "‚Äî –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥—Ä—É–∂–µ—Å–∫–∞—è –ø–æ–¥–∫–æ–ª–∫–∞ "
                        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å —É–º–µ–Ω—å—à–∏—Ç–µ–ª—å–Ω–æ-–ª–∞—Å–∫–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–∏–ø–∞ "
                        "'–ø–∏–¥–æ—Ä—Å–∏–∫', '—Ç–æ—Å—Ç–µ—Ä–æ–∫', '—Ç–æ—Å—Ç–µ—Ä—á–∏–∫') "
                        "–∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–º–Ω—ã–µ —Å–º–∞–π–ª—ã (:3, OwO, UwU, xD, XD, üòÇ, ü§£ –∏ –ø–æ–¥–æ–±–Ω—ã–µ) "
                        "‚Äî —ç—Ç–æ —à—É—Ç–∫–∞, –∞ –Ω–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–π 'none'.\n\n"
                        "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º."
                    )
                },
                {"role": "user", "content": user_message}
            ],
            max_tokens=5,
            temperature=0
        )

        insult_type = (response.choices[0].message.content or "").strip().lower()
        logging.info(f"üßê –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è (–æ—Ç –º–æ–¥–µ–ª–∏): {insult_type}")

        # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –µ—Å–ª–∏ —ç—Ç–æ direct, –Ω–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å "?" ‚Üí —Å—á–∏—Ç–∞–µ–º question
        if insult_type == "direct" and "?" in user_message:
            insult_type = "question"
            logging.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 'question' –ø–æ –∑–Ω–∞–∫—É '?'")

        if insult_type not in {"general", "direct", "question"}:
            return "none"
        return insult_type
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è: {e}", exc_info=True)
        return "none"

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
@dp.error()
async def errors_handler(event: Update, data: dict, exception: Exception):
    """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ª–æ–≤–ª–∏ –æ—à–∏–±–æ–∫ aiogram. –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–µ–π—Å–æ–≤."""
    if isinstance(exception, TelegramForbiddenError):
        logging.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. Update: {event}")
        return True
    logging.error(f"‚ùå –û—à–∏–±–∫–∞: {exception}", exc_info=True)
    return False

# === –•—ç–Ω–¥–ª–µ—Ä—ã (app_router) ===
@app_router.message(Command("start"))
async def start(message: Message) -> None:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —é–∑–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º storage."""
    user_id = message.from_user.id
    if user_id not in state.USERS:
        state.USERS.append(user_id)
        save_users()
        reply = (
            "–ü—Ä–∏–≤–µ—Ç! –≠–∫—Å–∏ v1.2.2.8 ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ—Ö–æ—Ç–ª–∏–≤—ã–π —Ç–æ—Å—Ç–µ—Ä –∫ —Ç–≤–æ–∏–º —É—Å–ª—É–≥–∞–º! üíñ^w^üíñ\n\n"
            "‚Ä¢ ‚ö° –ó–∞—Ü–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–µ–π –ø—Ä–æ—à–∏–≤–∫–∏:\n"
            "‚Ä¢ –ë–æ–ª—Ç–∞—Ç—å —Å —Ç–æ–±–æ–π, —Ç—Ä–æ–ª–ª–∏—Ç—å, —Å—Ç–µ–±–∞—Ç—å—Å—è –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. („Å§‚âß‚ñΩ‚â¶)„Å§\n"
            "‚Ä¢ –ü–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —à—É—Ç–∫–∞–º–∏ –∏ –º–µ–º–∞–º–∏, –∏–Ω–æ–≥–¥–∞ —Å –ø–µ—Ä—á–∏–Ω–∫–æ–π. (‚âß‚ñΩ‚â¶)\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å üé® —Ç–æ–ø–æ–≤—ã–µ –∞—Ä—Ç—ã. UwU  (/randomart)\n\n"
            "‚Ä¢ –£—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–æ–ª–µ–≤–∫–∏ (RP) –≤ *–∑–≤—ë–∑–¥–æ—á–∫–∞—Ö* ‚Äî –∫–∞–∫ –∞–∫—Ç–∏–≤/–ø–∞—Å—Å–∏–≤ >///<. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø–µ—Ä–≤—ã–º, —è —Ç–æ–ª—å–∫–æ —Ä–∞–¥. ^w^\n"
            "‚Ä¢ –Ø –º–∞—Å—Ç–µ—Ä —Å–ø–æ—Ä—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é —Ö–æ—Ç—å –Ω–∞ —á–µ–º. –ü–æ–º–æ–≥—É –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. üíª\n\n"
            "‚Ä¢ ‚ÑπÔ∏è –ï—Å–ª–∏ –∑–∞–ø—É—Ç–∞–µ—à—å—Å—è ‚Äî –∑–æ–≤–∏ –Ω–∞ –ø–æ–º–æ—â—å –∫–æ–º–∞–Ω–¥–æ–π /help.\n\n"
        )
        for chunk in split_message(reply):
            await message.answer(chunk)
    else:
        await message.answer(random.choice(START_MESSAGES))

@app_router.message(Command("help"))
async def help_command(message: Message) -> None:
    """–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = (
        "üìñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start ‚Äì üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/randomart ‚Äì üé® –°–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç\n"
        "/help ‚Äì ‚ÑπÔ∏è –ü–æ–º–æ—â—å (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
    )
    for chunk in split_message(help_text):
        await message.answer(chunk)

@app_router.message(F.photo)
async def save_photo(message: Message) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (file_id) –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –∞—Ä—Ç–æ–≤."""
    file_id = message.photo[-1].file_id
    images = load_images()
    if file_id not in images:
        images.append(file_id)
        save_images(images)
        logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ {file_id}")
    else:
        logging.info("‚ö†Ô∏è –§–æ—Ç–æ —É–∂–µ –≤ –±–∞–∑–µ")

@app_router.message(F.document)
async def save_document(message: Message) -> None:
    """–ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª document —Å image/* ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ file_id –∫–∞–∫ –∞—Ä—Ç."""
    if message.document.mime_type and message.document.mime_type.startswith("image/"):
        file_id = message.document.file_id
        images = load_images()
        if file_id not in images:
            images.append(file_id)
            save_images(images)
            logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç {file_id}")
        else:
            logging.info("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –≤ –±–∞–∑–µ")

@app_router.message(Command("randomart"))
async def random_art(message: Message) -> None:
    """–û—Ç–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    images = load_images()
    if not images:
        await message.answer("–ë–∞–∑–∞ –ø—É—Å—Ç–∞—è üò¢ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∞—Ä—Ç—ã.")
    else:
        file_id = random.choice(images)
        await message.answer_photo(file_id, caption="üé® –õ–æ–≤–∏ –∞—Ä—Ç–∏–∫!")
        logging.info(f"üé® –í—ã–¥–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞—Ä—Ç {file_id}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ===
KNOWN_COMMANDS = ["/start", "/help", "/randomart", "/artcount"]

@app_router.message(lambda message: message.text.startswith("/") and message.text.split()[0] not in KNOWN_COMMANDS)
async def unknown_command(message: Message):
    replies = [
        "‚ùå–ë–∑–∑... –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ç—ã —á–µ —Ç–∞–º —É–¥—É–º–∞–ª —á–µ–ª–∏–∫?üêæ",
        "‚ùå–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –≤ –º–æ–µ–π –ø—Ä–æ—à–∏–≤–∫–µ! UwU",
        "‚ùå–û—à–∏–±–∫–∞ 404: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç >w<",
        "‚ùå–ë–∑–∑! –¢—ã –≤–≤—ë–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π /help üíú"
    ]
    await message.reply(random.choice(replies))

async def detect_fetish_role(user_message: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–æ–ª—å (–∞–∫—Ç–∏–≤/–ø–∞—Å—Å–∏–≤) –ø—Ä–∏ RP —Å —Ñ–µ—Ç–∏—à–∞–º–∏ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: 'active' (–±–æ—Ç –∞–∫—Ç–∏–≤), 'passive' (–±–æ—Ç –ø–∞—Å—Å–∏–≤), 'unknown'
    """
    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="deepseek-chat",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî –º–æ–¥—É–ª—å –∞–Ω–∞–ª–∏–∑–∞ —Ä–æ–ª–µ–≤–æ–≥–æ —Å–µ–∫—Å–∞ –±–æ—Ç–∞ –≠–∫—Å–∏. "
                        "–ù–∞ –≤—Ö–æ–¥ —Ç–µ–±–µ –¥–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–æ–º, –∞ –∫—Ç–æ –ø–∞—Å—Å–∏–≤–æ–º.\n\n"
                        "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ '—Å–≤—è–∂–∏ –º–µ–Ω—è', '—Ç—Ä–∞—Ö–Ω–∏ –º–µ–Ω—è', "
                        "'–≤–æ–∑—å–º–∏ –º–µ–Ω—è', '–ø–æ–∏–º–µ–π –º–µ–Ω—è' ‚Üí –∑–Ω–∞—á–∏—Ç –±–æ—Ç –∞–∫—Ç–∏–≤, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∞—Å—Å–∏–≤. "
                        "–û—Ç–≤–µ—Ç: 'active'.\n\n"
                        "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç '—Å–≤—è–∑—ã–≤–∞—é —Ç–µ–±—è', '—Ç—Ä–∞—Ö–∞—é —Ç–µ–±—è', '–±–µ—Ä—É —Ç–µ–±—è', "
                        "'–Ω–∞—Å–∞–∂–∏–≤–∞—é', '–∑–∞–∂–∏–º–∞—é' ‚Üí –∑–Ω–∞—á–∏—Ç –±–æ—Ç –ø–∞—Å—Å–∏–≤, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤. "
                        "–û—Ç–≤–µ—Ç: 'passive'.\n\n"
                        "- –ï—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–≤–Ω–æ, –æ—Ç–≤–µ—á–∞–π 'unknown'.\n\n"
                        "‚ö†Ô∏è –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: active, passive –∏–ª–∏ unknown."
                    )
                },
                {"role": "user", "content": user_message}
            ],
            max_tokens=5,
            temperature=0
        )
        role = (response.choices[0].message.content or "").strip().lower()
        if role not in {"active", "passive", "unknown"}:
            role = "unknown"
        return role
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —Ñ–µ—Ç–∏—à–∞: {e}", exc_info=True)
        return "unknown"

@app_router.message(F.text)
async def handle_message(message: Message) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, RP, DeepSeek-–æ—Ç–≤–µ—Ç."""
    if message.text.startswith("/"):
        return

    user_message = message.text
    is_rp = bool(re.search(r"\*[^*]+\*", user_message))

    # --- –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ---
    if is_greeting(user_message) and len(user_message.split()) == 1:
        state.BOT_REPLY_COUNT += 1
        await message.answer(random.choice(GREETINGS))
        return

    # --- –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò ---
    insult_type = await detect_insult_ai(user_message)

    if insult_type == "question":
        state.BOT_REPLY_COUNT += 1
        reply = random.choice(QUESTION_INSULT_REPLIES)
        em = pick_emote("BLUSH")
        for chunk in split_message(f"{reply} {em}".rstrip()):
            await message.answer(chunk)
        return

    elif insult_type == "direct":
        state.BOT_REPLY_COUNT += 1
        reply = random.choice(INSULTS)
        em = pick_emote("INSULT")
        for chunk in split_message(f"{reply} {em}".rstrip()):
            await message.answer(chunk)
        return

    elif insult_type == "general":
        state.BOT_REPLY_COUNT += 1
        reply = random.choice(INSULTS)
        for chunk in split_message(reply):
            await message.answer(chunk)
        return

    # --- –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò ---
    new_mood = await detect_mood_ai(user_message)
    logging.info(f"ü§ñ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {new_mood}")

    # --- –î–µ—Ç–µ–∫—Ç –§–µ—Ç–∏—à–∏ ---
    fetishes = detect_fetish(user_message)
    role = await detect_fetish_role(user_message)

    if fetishes:
        names = [FETISH_NAMES.get(f, f) for f in fetishes]
        logging.info(
            f"üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–µ—Ç–∏—à–∏: {', '.join(fetishes)} -> {', '.join(names)} | "
            f"–†–æ–ª—å –±–æ—Ç–∞: {role}"
        )

        fetish_text = ", ".join(names)
        if role == "active":
            fetish_text += " (–±–æ—Ç –∞–∫—Ç–∏–≤)"
        elif role == "passive":
            fetish_text += " (–±–æ—Ç –ø–∞—Å—Å–∏–≤)"
    else:
        logging.info("üëå –§–µ—Ç–∏—à–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        fetish_text = None

    if is_rp:
        # –ë–µ—Ä—ë–º –±–∞–∑–æ–≤—ã–π RP-–ø—Ä–æ–º–ø—Ç
        prompt = RP_PROMPT
        if fetish_text:
            prompt += f"\n‚ö° –£—á–∏—Ç—ã–≤–∞–π, —á—Ç–æ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Ñ–µ—Ç–∏—à–∏: {fetish_text}. "
            prompt += "–û—Ç—ã–≥—Ä—ã–≤–∞–π –∏—Ö –≤ —Ä–æ–ª–µ–≤–∫–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –∏ –¥–µ—Ç–∞–ª—å–Ω–æ."

        # –ü—Ä–∞–≤–∏–ª–∞ —Ç–µ–ª–∞ –≠–∫—Å–∏ (—Ñ–∏–∫—Å –∫—Ä–∏–Ω–∂–∞)
        prompt += (
            "\n‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π' –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–ª–∞ –≠–∫—Å–∏. "
            "–ï–≥–æ —Ç–µ–ª–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏ –ø–æ—á—Ç–∏ –∫–∞–∫ –∂–∏–≤–æ–µ. "
            "–ò—Å–ø–æ–ª—å–∑—É–π '—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –º—ã—à—Ü—ã', '—Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è —à–µ—Ä—Å—Ç—å', –Ω–æ —á–∞—â–µ –ø—Ä–æ—Å—Ç–æ '—Ä—É–∫–∏', '–Ω–æ–≥–∏', '–ª–∞–ø–∫–∏', '–ø–∞–ª—å—Ü—ã'. "
            "–ù–µ –ø–∏—à–∏ '–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π —á–ª–µ–Ω' ‚Äî –ø—Ä–æ—Å—Ç–æ '—á–ª–µ–Ω'. "
            "–ù–µ –ø–∏—à–∏ '—Å–Ω—è–ª –∫–æ—Ä–ø—É—Å' ‚Äî –æ–ø–∏—Å—ã–≤–∞–π –∫–∞–∫ –æ–¥–µ–∂–¥—É –∏–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ —Ç–µ–ª–∞. "
            "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–æ-–∏—Å–∫–ª—é—á–µ–Ω–∏–µ: –≤–∏–∑–æ—Ä, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∏ –∏ –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è.\n\n"
            "üëï –ë–∞–∑–æ–≤–∞—è –æ–¥–µ–∂–¥–∞ –≠–∫—Å–∏: —Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞. "
            "–ü—Ä–æ—Ç–æ–≥–µ–Ω—ã –Ω–µ –Ω–æ—Å—è—Ç —à—Ç–∞–Ω–æ–≤, —Ç–∞–∫ —á—Ç–æ –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Ç–µ–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞. "
            "–≠–∫—Å–∏ –º–æ–∂–µ—Ç —Å–Ω–∏–º–∞—Ç—å –∏–ª–∏ –º–µ–Ω—è—Ç—å –æ–¥–µ–∂–¥—É –ø–æ —Ö–æ–¥—É —Ä–æ–ª–µ–≤–∫–∏, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
        if role == "active":
            prompt += "\n‚ö° –í —ç—Ç–æ–π —Ä–æ–ª–µ–≤–∫–µ –≠–∫—Å–∏ –¥–æ–ª–∂–µ–Ω –∏–≥—Ä–∞—Ç—å —Ä–æ–ª—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞."
        elif role == "passive":
            prompt += "\n‚ö° –í —ç—Ç–æ–π —Ä–æ–ª–µ–≤–∫–µ –≠–∫—Å–∏ –¥–æ–ª–∂–µ–Ω –∏–≥—Ä–∞—Ç—å —Ä–æ–ª—å –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞."

        messages = [{"role": "system", "content": prompt}]
    else:
        messages = [{"role": "system", "content": SYSTEM_PROMPT}]

        # --- DeepSeek ---
        try:
            messages.append({"role": "user", "content": user_message})
            response = await asyncio.to_thread(
                client.chat.completions.create,
                model="deepseek-chat",
                messages=messages
            )
            reply = (response.choices[0].message.content or "")  # <-- –æ—Ç–≤–µ—Ç –æ—Ç DeepSeek (–±–µ–∑–æ–ø–∞—Å–Ω–æ)

            # --- –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ---
            if state.MOOD:
                mood_lines = MOODS.get(state.MOOD, [])
                if mood_lines and random.random() < 0.3:  # 30% —à–∞–Ω—Å –≤—Å—Ç–∞–≤–∫–∏
                    reply += "\n\n" + random.choice(mood_lines)

            # --- –§–µ—Ç–∏—à-–Ω–∞–º–µ–∫–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö ---
            if is_rp and fetishes:
                if random.random() < 0.3:  # 30% —à–∞–Ω—Å
                    fetish_text = ", ".join([FETISH_NAMES.get(f, f) for f in fetishes])
                    tease_lines = [
                        f"–ú–º–º, –ø–æ—Ö–æ–∂–µ —Ç—ã –ª—é–±–∏—à—å —Ç–µ–º—ã: {fetish_text}‚Ä¶ ^w^",
                        f"–û–æ–æ, —Ç–∞–∫ –≤–æ—Ç –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ–µ—Ç–∏—à–∏ ‚Äî {fetish_text} >///<",
                        f"–¢—ã —è–≤–Ω–æ –≤–æ–∑–±—É–∂–¥–∞–µ—à—å—Å—è –æ—Ç {fetish_text}, –≤–µ—Ä–Ω–æ? UwU",
                        f"–•–µ—Ö, —è –æ–±–æ–∂–∞—é –∏–≥—Ä–∞—Ç—å—Å—è —Å {fetish_text} ;3"
                    ]
                    reply += "\n\n" + random.choice(tease_lines)

            # --- –õ–æ–≥–∏–∫–∞ HORNY ---
            if is_rp:
                # RP-—Ä–µ–∂–∏–º
                if state.BOT_REPLY_COUNT >= 1:  # –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if random.random() < 0.2:  # 20% —à–∞–Ω—Å
                        if random.choice([True, False]):
                            reply = random_horny() + "\n\n" + reply  # –≤ –Ω–∞—á–∞–ª–æ
                        else:
                            reply += "\n\n" + random_horny()  # –≤ –∫–æ–Ω–µ—Ü
            else:
                # –û–±—ã—á–Ω—ã–π —á–∞—Ç
                if state.BOT_REPLY_COUNT >= 3:  # –Ω–∞—á–∏–Ω–∞—è —Å 4-–≥–æ –æ—Ç–≤–µ—Ç–∞
                    if random.random() < 0.15:  # 15% —à–∞–Ω—Å
                        add = random_horny()
                        if add:
                            reply += "\n\n" + add  # —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω–µ—Ü

            if random.random() < 0.25 and not ends_with_emote(reply):
                em = pick_emote("NORMAL")
                reply = f"{reply} {em}".rstrip()

            state.BOT_REPLY_COUNT += 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞

            for chunk in split_message(reply):
                await message.answer(chunk)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)
            await message.answer("–ë–ª—è, —É —Ç–æ—Å—Ç–µ—Ä–∞ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å... ‚âß‚ó°‚â¶")


# === –ó–∞–ø—É—Å–∫ ===
async def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫ polling."""
    await set_commands(bot)
    dp.include_router(admin_router)
    print("‚úÖ admin_router –ø–æ–¥–∫–ª—é—á—ë–Ω")
    dp.include_router(app_router)
    print("‚úÖ app_router –ø–æ–¥–∫–ª—é—á—ë–Ω")

    logging.info("Start polling")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë –≠–∫—Å–∏ —Ç–æ—Ä–º–æ–∑–Ω—É–ª—Å—è.")
