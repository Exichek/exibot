#admin_commands

"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≠–∫—Å–∏.
–ó–¥–µ—Å—å –ª–µ–∂–∞—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–º: –∞—Ä—Ç—ã, –∞–ø—Ç–∞–π–º, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–∏–Ω–≥.
"""

import time
import state
import asyncio
import json
import os
from typing import List
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

print("‚úÖ admin_commands.py –∑–∞–≥—Ä—É–∂–µ–Ω")

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ ===
START_TIME = time.time()
IMAGES_FILE = os.path.join("config", "images.json")

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ ---
with open(os.path.join("config", "owner.json"), "r", encoding="utf-8") as f:
    owner_data = json.load(f)

ADMINS: set[int] = {int(x) for x in owner_data.get("ADMINS", [])}

# --- Router –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ ---
admin_router = Router()


# === –£—Ç–∏–ª–∏—Ç—ã ===
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ user_id –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMINS


def load_images() -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (file_id) –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã."""
    if not os.path.exists(IMAGES_FILE):
        with open(IMAGES_FILE, "w", encoding="utf-8") as f:
            json.dump({"IMAGES": []}, f, ensure_ascii=False, indent=2)
    with open(IMAGES_FILE, "r", encoding="utf-8") as f:
        return json.load(f).get("IMAGES", [])


def save_images(images: List[str]) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ (file_id) –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É."""
    with open(IMAGES_FILE, "w", encoding="utf-8") as f:
        json.dump({"IMAGES": images}, f, ensure_ascii=False, indent=2)


# === –•—ç–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ ===
@admin_router.message(Command("listimages"))
async def list_images(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∞—Ä—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1, –º–∞–∫—Å 200)."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    images = load_images()
    if not images:
        await message.answer("üìÇ –ë–∞–∑–∞ –∞—Ä—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return

    parts = message.text.strip().split(maxsplit=1)
    count = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else 1
    count = max(1, min(count, 200))  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ

    last_images = images[-count:][::-1]
    await message.answer(f"üìÇ –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {count} –∞—Ä—Ç–æ–≤:")

    for file_id in last_images:
        try:
            await message.answer_photo(
                file_id, caption=f"<code>{file_id}</code>", parse_mode="HTML"
            )
            await asyncio.sleep(1)  # flood control
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {file_id}: {e}")


@admin_router.message(Command("removeimage"))
async def remove_image(message: Message) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç—ã –ø–æ ID (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ ID –∞—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ü—Ä–∏–º–µ—Ä: `/removeimage id1,id2,id3`",
            parse_mode="Markdown",
        )
        return

    ids_to_remove = [x.strip() for x in parts[1].split(",")]
    images = load_images()
    removed, not_found = [], []

    for file_id in ids_to_remove:
        if file_id in images:
            images.remove(file_id)
            removed.append(file_id)
        else:
            not_found.append(file_id)

    save_images(images)

    reply = []
    if removed:
        reply.append(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {len(removed)} –∞—Ä—Ç–æ–≤")
    if not_found:
        reply.append(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found)} –∞—Ä—Ç–æ–≤")

    await message.answer("\n".join(reply) if reply else "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ.")


@admin_router.message(Command("artcount"))
async def art_count(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–æ–≤ –≤ –±–∞–∑–µ."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    images = load_images()
    if not images:
        await message.answer("üìÇ –ë–∞–∑–∞ –∞—Ä—Ç–æ–≤ –ø—É—Å—Ç–∞.")
    else:
        await message.answer(f"üìÇ –í –±–∞–∑–µ {len(images)} –∞—Ä—Ç–æ–≤.")


@admin_router.message(Command("status"))
async def status_cmd(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –∞–ø—Ç–∞–π–º, —é–∑–µ—Ä—ã, –æ—Ç–≤–µ—Ç—ã, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    uptime = int(time.time() - state.START_TIME)
    h, m, s = uptime // 3600, (uptime % 3600) // 60, uptime % 60

    reply = (
        "üß† –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"‚Ä¢ Uptime: {h:02d}:{m:02d}:{s:02d}\n"
        f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(state.USERS)}\n"
        f"‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {state.BOT_REPLY_COUNT}"
    )

    log_file = "bot.log"
    if os.path.exists(log_file):
        with open(log_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
        last_logs = "".join(lines[-20:])
        reply += f"\n\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:\n<pre>{last_logs}</pre>"
    else:
        reply += "\n\n‚ö†Ô∏è –õ–æ–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await message.answer(reply, parse_mode="HTML")


@admin_router.message(Command("ownhelp"))
async def own_help(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    help_text = (
        "üìñ –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/listimages <N> ‚Äì üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∞—Ä—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)\n"
        "/removeimage <id1,id2,...> ‚Äì üóë –£–¥–∞–ª–∏—Ç—å –∞—Ä—Ç—ã –ø–æ ID\n"
        "/artcount ‚Äì üî¢ –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–æ–≤\n"
        "/status ‚Äì üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ (–∞–ø—Ç–∞–π–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ—Ç–≤–µ—Ç—ã, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏)\n"
        "/ping ‚Äì üèì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n"
        "/ownhelp ‚Äì üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ (—Ç—ã —Ç—É—Ç)\n"
    )
    await message.answer(help_text)


@admin_router.message(Command("ping"))
async def ping(message: Message) -> None:
    """–ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–æ—É—Ç–µ—Ä–∞."""
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("üèì Pong –æ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞!")
